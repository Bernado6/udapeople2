version: 2.1

# parameters:
  # cci_wait_timeout:
  #     default: 1200
  #     description: |
  #       The wait timeout for the step to complete.The string is a decimal with unit suffix, such as “20m”, “1.25h”, “5s” (default: 10 minutes)
  #     type: integer
commands:
  install_awscli:
    description: Install AWS CLI v2
    steps :
      - run:
         name: Install AWS CLI v2
         command: |
           curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
           unzip awscliv2.zip
           sudo ./aws/install

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Destroy front-end cloudformation stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >> "

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.   
    parameters:
      workflow_id:
        type: string  
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            export SUCCESS=$(curl -k https://kvdb.io/14qV1F64XYqNDSAAyhW75u/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if (($SUCCESS == 1)); then
              echo "Reverting migrations..."
              cd ~/project/backend
              npm install
              npm run migrations:revert
            else
              echo "$SUCCESS"
              echo "No migrations to revert."
            fi
                       
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install --force
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install --force
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend-test
          command: |
            cd frontend
            npm install --force
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend-test
          command: |
            cd backend
            npm install --force
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install --force
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan backend
          command: |
            cd backend
            npm install --force
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople                      
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"          
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            echo ${BACKEND_IP} > .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
       - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["c9:40:ea:39:ca:65:dc:b0:b9:be:75:90:fc:9c:72:04"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          working_directory: ./.circleci/ansible
          command: |
            apk add --update ansible curl rsync openssh nodejs npm
      - run:
          name: Install aws cli
          command: |
            pip install awscli
      - run:
          name: Configure server
          command: |
            touch backend/.env
            echo NODE_ENV=production >> backend/.env
            echo TYPEORM_CONNECTION=postgres >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=/home/ubuntu/udaapp/migrations  >> backend/.env
            echo TYPEORM_MIGRATIONS=/home/ubuntu/udaapp/migrations/*.js >> backend/.env
            echo TYPEORM_ENTITIES=/home/ubuntu/udaapp/modules/domain/**/*.entity.js >> backend/.env
            echo TYPEORM_HOST=database-1.cjip2vcmn4xa.us-east-1.rds.amazonaws.com >> backend/.env
            echo TYPEORM_PORT=5432 >> backend/.env
            echo TYPEORM_USERNAME=postgres >> backend/.env
            echo TYPEORM_PASSWORD=postgres >> backend/.env
            echo TYPEORM_DATABASE=postgres >> backend/.env
            cat backend/.env
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/.env
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  
  run-migrations:
    docker:
      - image: circleci/node:13.8.0 # Docker image here that supports NodeJS
    steps:
      - checkout # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code 
            cd backend
            npm install --force
            npm audit fix --force
            # Run and save the migration output
            run migrations > migrations_dump.txt
            
      - run:
          name: Send migration results to kvdb
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then 
                # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
                curl https://kvdb.io/5ka1vYVxGkaLBLXFWXeB75/cicd-db-migration-$\{CIRCLE_WORKFLOW_ID:0:7\}  -d '1'
            fi
            #exit 1
        
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]